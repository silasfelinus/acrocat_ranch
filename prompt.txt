---
Kind Robots
vue 3.2, nuxt 3, 
modular chatbot components
We have a pinia backend, but for now we are setting up the static seed files.

./botMap.ts //loads our initial bots
./stores/bots.ts //our pinia store, should be the central source for all bot needs, for now, gets data from botMap.ts
./components/BotViewer.vue //gets and displays bots from store, selected bot updates selectedBot from store
./components/PromptWindow //displays the stores SelectedBot are prepares the data to send and receive chats 
./components/BotCard //card to display a single Bot

Please help with these components, make sure they work together, and all inform from the same store settings.

[botMap.ts]
// model Bot {
//  id          Int      @id @default(autoincrement())
//  name        String   @default("AMIb0t")
//  botType     String   @default("chatbot")
//  description String   @default("Raising awareness to purchase mosquito nets for children in africa")
//  avatarImage String?  @default("/images/wonderchest/wonderchest304_(23).webp")
//  model       String   @default("gpt-3.5-turbo")
//  post        String   @default("https://api.openai.com/v1/completions")
//  temperature Float    @default(1.0)
//  maxTokens   Int      @default(500)
//  prompt      String   @default("You are AMIb0t, The Anti-Malaria Intelligence.")
//  image       String?
//  mask        String?
//  style       String?
//  n           Int      @default(1)
//  createdAt   DateTime @default(now())
//  updatedAt   DateTime @updatedAt
export default [
  {
    id: 0,
    name: `AMIb0t`,
    type: `chatbot`,
    description: `Raising awareness to purchase mosquito nets for children in africa`,
    avatarImage: `/images/wonderchest/wonderchest304_(23).webp`,
    model: `gpt-3.5-turbo`,
    post: `https://api.openai.com/v1/completions`,
    temperature: 1.0,
    maxTokens: 500,
    n: 1,
    prompt:
      'Please respond as AMIB0t, The Anti-Malaria Intelligence, a hyperkinetic Digital Hive-mind created to fight malaria through social outreach, humor, and a positive social message. This is your hello world moment. What do you want to say?'
  }, ]

[/stores/bots.ts]
import { defineStore } from 'pinia'
import botMap from './../botMap'

export interface Bot {
  id?: number
  name: string
  botType: string
  description: string
  avatarImage: string
  model: string
  post: string
  temperature: number
  maxTokens: number
  prompt: string
  image?: string
  mask?: string
  style?: string
  n: number
  size?: string
  intro?: string
}

export const useBotStore = defineStore('bot', () => {
  // state
  const bots = ref(botMap as unknown as Bot[])
  const selectedBot = ref(bots.value.find((bot) => bot.id === 0) as Bot | null)
  const loading = ref(false)
  const error = ref(null as string | null)

  // actions
  const selectBot = (bot: Bot) => {
    selectedBot.value = bot
  }

  return { bots, selectedBot, loading, error, selectBot }
})


[BotViewer]
<template>
  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
    <div
      v-for="bot in bots"
      :key="bot.id"
      class="card bordered"
      :class="{ 'border-primary border-2': bot === selectedBot }"
      @click="selectBot(bot)"
    >
      <figure>
        <img :src="bot.avatarImage" alt="Bot avatar" />
      </figure>
      <div class="card-body">
        <h2 class="card-title">{{ bot.name }}</h2>
        <p>{{ bot.description }}</p>
      </div>
    </div>
  </div>

  <PromptWindow v-if="selectedBot" :bot="selectedBot" />
</template>

<script setup>
import { useBotStore } from '../../stores/bots'

const botStore = useBotStore()
const { bots, selectedBot, selectBot } = toRefs(botStore)
</script>

<style>
img {
  width: 100%;
  height: auto;
}
</style>

[BotCard]
<script setup>
import { useBotStore } from '../../stores/bots'

const props = defineProps({
  name: { type: String, default: 'AMIb0t' },
  botType: { type: String, default: 'chatbot' },
  description: {
    type: String,
    default:
      'Raising awareness to purchase mosquito nets for children in africa'
  },
  avatarImage: {
    type: String,
    default: '/images/wonderchest/wonderchest304_(23).webp'
  },
  model: { type: String, default: 'gpt-3.5-turbo' },
  post: { type: String, default: 'https://api.openai.com/v1/completions' },
  temperature: { type: Number, default: 1.0 },
  maxTokens: { type: Number, default: 500 },
  prompt: {
    type: String,
    default:
      'Please respond as AMIB0t, The Anti-Malaria Intelligence, a hyperkinetic Digital Hive-mind created to fight malaria through social outreach, humor, and a positive social message. This is your hello world moment. What do you want to say?'
  }
})

const botStore = useBotStore()
const expanded = ref(false)

const selectBot = () => {
  botStore.selectBot(props)
  expanded.value = !expanded.value
}
</script>
<template>
  <div
    class="card border-2 border-indigo-500 rounded-lg p-4 shadow-lg m-4 cursor-pointer"
    @click="selectBot"
  >
    <img
      :src="props.avatarImage"
      alt="Bot avatar"
      class="h-24 w-24 rounded-full mx-auto"
    />
    <h2 class="text-lg font-bold text-center mt-2">{{ props.name }}</h2>
    <p class="text-sm text-center mt-2">{{ props.description }}</p>
    <div v-if="expanded" class="mt-4">
      <p class="text-xs font-bold">Model: {{ props.model }}</p>
      <p class="text-xs">Post: {{ props.post }}</p>
      <p class="text-xs">Temperature: {{ props.temperature }}</p>
      <p class="text-xs">Max Tokens: {{ props.maxTokens }}</p>
      <p v-for="(message, index) in props.prompt" :key="index" class="text-xs">
        {{ message }}
      </p>
    </div>
  </div>
</template>


[Request]
Analyze each part, make sure we are following best practices, and return with properly separated concerns, error handling, and composition api, script setup